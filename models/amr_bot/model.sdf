<?xml version="1.0" encoding="utf-8"?>
<sdf version='1.7'>
  <model name='amr_bot'>
    <link name='base_footprint'>
      <inertial>
        <pose>0.154135 0.097335 -0.030396 0 -0 3.14</pose>
        <mass>17.7243</mass>
        <inertia>
          <ixx>0.151726</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.209426</iyy>
          <iyz>0</iyz>
          <izz>0.106435</izz>
        </inertia>
      </inertial>
      <collision name='base_footprint_fixed_joint_lump__base_link_collision'>
        <pose>0.075 0 0.14 0 -0 0</pose>
        <geometry>
          <box>
            <size>0.68 0.4 0.27</size>
          </box>
        </geometry>
      </collision>
      <visual name='base_footprint_fixed_joint_lump__base_link_visual'>
        <pose>0 -0.031 0 0 -0 0</pose>
        <geometry>
          <mesh>
            <scale>1 1 1</scale>
            <uri>model://amr_bot/meshes/base_link.STL</uri>
          </mesh>
        </geometry>
      </visual>
    </link>


    <!-- ********** LIDAR ***********    -->
    <link name="lidar_link">
      <inertial>
        <pose>-0.15 0 0.31 0 0 0</pose>
        <inertia>
          <ixx>0.001</ixx>
          <ixy>0.000</ixy>
          <ixz>0.000</ixz>
          <iyy>0.001</iyy>
          <iyz>0.000</iyz>
          <izz>0.001</izz>
        </inertia>
        <mass>0.114</mass>
      </inertial>

      <collision name="lidar_collision">
        <pose>-0.15 0 0.31 0 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.06</radius>
            <length>0.1</length>
          </cylinder>
        </geometry>
      </collision>

      <visual name="lidar_visual">
        <pose>-0.15 0 0.31 0 0 0</pose>
        <geometry>
          <cylinder>
            <radius>0.06</radius>
            <length>0.1</length>
          </cylinder>
        </geometry>
        <material>
          <ambient>0.0 0.0 0.0 1.0</ambient>
          <diffuse>0.0 0.0 0.0 1.0</diffuse>
          <specular>0.0 0.0 0.0 1.0</specular>
          <emissive>0.0 0.0 0.0 1.0</emissive>
        </material>
      </visual>

      <sensor name="lidar" type="ray">
        <pose>-0.15 0 0.5 0 0 3.14</pose>
        <always_on>true</always_on>
        <visualize>true</visualize>
        <update_rate>5</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>120</samples>
              <resolution>1.000000</resolution>
              <min_angle>-3.14159</min_angle>
              <max_angle>3.14159</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.3</min>
            <max>15.0</max>
            <resolution>0.015</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
          <ros>
            <remapping>~/out:=scan</remapping>
          </ros>
          <output_type>sensor_msgs/LaserScan</output_type>
          <frame_name>lidar_link</frame_name>
        </plugin>
      </sensor>
    </link>

    <joint name='lidar_joint' type='fixed'>
      <pose relative_to='base_footprint'>0.35 0 1.40 0 0 0</pose>
      <parent>base_footprint</parent>
      <child>lidar_link</child>
    </joint>


    <!-- ********** IMU ***********    -->
    <link name="imu_link">
      <gravity>true</gravity>
      <sensor name="bmb_imu" type="imu">
        <pose>0 0 0.31</pose>
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <visualize>true</visualize>
        <imu>
          <orientation>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-3</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-3</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-3</stddev>
              </noise>
            </z>
          </orientation>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
        <plugin name="basic_mobile_bot_imu" filename="libgazebo_ros_imu_sensor.so">
          <initial_orientation_as_reference>false</initial_orientation_as_reference>
          <frame_name>imu_link</frame_name>
          <ros>
            <namespace>/imu</namespace>
            <remapping>~/out:=data</remapping>
          </ros>
        </plugin>
      </sensor>
    </link>

    <joint name='imu_joint' type='fixed'>
      <pose relative_to='base_footprint'>0.0 0 0.0 0 0 0</pose>
      <parent>base_footprint</parent>
      <child>imu_link</child>
      <axis>
        <xyz>0 1 0</xyz>
        <limit>
          <lower>-1e+16</lower>
          <upper>1e+16</upper>
        </limit>
        <dynamics>
          <spring_reference>0</spring_reference>
          <spring_stiffness>0</spring_stiffness>
        </dynamics>
      </axis>
    </joint>

    <joint name='left_joint' type='revolute'>
      <pose relative_to='base_footprint'>0.064918 -0.2 0.0767 0 -0 3.14</pose>
      <parent>base_footprint</parent>
      <child>wheel_l</child>
      <axis>
        <xyz>0 1 0</xyz>
        <limit>
          <effort>30</effort>
          <velocity>5</velocity>
        </limit>
        <dynamics>
          <spring_reference>0</spring_reference>
          <spring_stiffness>0</spring_stiffness>
        </dynamics>
      </axis>
    </joint>
    <link name='wheel_l'>
      <pose relative_to='left_joint'>0 0 0 0 0 0</pose>
      <inertial>
        <pose>0 0 0 0 -0 0</pose>
        <mass>1.1541</mass>
        <inertia>
          <ixx>0.0029866</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.0016967</iyy>
          <iyz>0</iyz>
          <izz>0.0016788</izz>
        </inertia>
      </inertial>
      <collision name='wheel_l_collision'>
        <pose>0 0.042 0 1.57 -0 0</pose>
        <geometry>
          <cylinder>
            <length>0.035</length>
            <radius>0.0767</radius>
          </cylinder>
        </geometry>
      </collision>
      <visual name='wheel_l_visual'>
        <pose>0 0 0 0 -0 1.57</pose>
        <geometry>
          <mesh>
            <scale>1 1 1</scale>
            <uri>model://amr_bot/meshes/Wheel_2.STL</uri>
          </mesh>
        </geometry>
      </visual>
    </link>
    <joint name='right_joint' type='revolute'>
      <pose relative_to='base_footprint'>0.064918 0.2 0.0767 0 -0 0</pose>
      <parent>base_footprint</parent>
      <child>wheel_r</child>
      <axis>
        <xyz>0 -1 0</xyz>
        <limit>
          <effort>30</effort>
          <velocity>5</velocity>
        </limit>
        <dynamics>
          <spring_reference>0</spring_reference>
          <spring_stiffness>0</spring_stiffness>
        </dynamics>
      </axis>
    </joint>
    <link name='wheel_r'>
      <pose relative_to='right_joint'>0 0 0 0 -0 0</pose>
      <inertial>
        <pose>0 0 0 0 -0 0</pose>
        <mass>1.1541</mass>
        <inertia>
          <ixx>0.0029866</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.0016967</iyy>
          <iyz>0</iyz>
          <izz>0.0016788</izz>
        </inertia>
      </inertial>
      <collision name='wheel_r_collision'>
        <pose>0 0.042 0 1.57 -0 0</pose>
        <geometry>
          <cylinder>
            <length>0.035</length>
            <radius>0.0767</radius>
          </cylinder>
        </geometry>
      </collision>
      <visual name='wheel_r_visual'>
        <pose>0 0 0 0 -0 1.57</pose>
        <geometry>
          <mesh>
            <scale>1 1 1</scale>
            <uri>model://amr_bot/meshes/Wheel_2.STL</uri>
          </mesh>
        </geometry>
      </visual>
    </link>

    <plugin name="basic_mobile_bot_diff_drive" filename="libgazebo_ros_diff_drive.so">
      <update_rate>30</update_rate>
      <!-- wheels -->
      <left_joint>left_joint</left_joint>
      <right_joint>right_joint</right_joint>
      <!-- kinematics -->
      <wheel_separation>0.4</wheel_separation>
      <wheel_diameter>0.1534</wheel_diameter>
      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>
      <!-- Receive velocity commands on this ROS topic -->
      <command_topic>cmd_vel</command_topic>
      <!-- output -->
      <!-- When false, publish no wheel odometry data to a ROS topic -->
      <publish_odom>true</publish_odom>
      <!-- When true, publish coordinate transform from odom to base_footprint -->
      <!-- I usually use the robot_localization package to publish this transform -->
      <publish_odom_tf>false</publish_odom_tf>
      <!-- When true, publish coordinate transform from base_link to the wheels -->
      <!-- The robot_state_publisher package is often used to publish this transform -->
      <publish_wheel_tf>false</publish_wheel_tf>
      <odometry_topic>odom</odometry_topic>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_footprint</robot_base_frame>
      <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
      <odometry_source>1</odometry_source>
      <!-- Change the ROS topic we will publish the odometry data to -->
      <ros>
        <remapping>odom:=wheel/odometry</remapping>
      </ros>
    </plugin>


    <plugin name='cad_assembly_amr_joint_state' filename='libgazebo_ros_joint_state_publisher.so'>
      <ros>
        <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>30</update_rate>
      <joint_name>left_joint</joint_name>
      <joint_name>right_joint</joint_name>
    </plugin>


  </model>
</sdf>
